{"ast":null,"code":"import * as actionType from \"./actionType\";\nimport { returnErrors } from \"./messages\";\nimport axios from \"axios\";\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({\n    type: actionType.USER_LOADING\n  }); //get token from the state or the local state\n\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //if token, add headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  axios.get(\"http://localhost:8000/api/auth/user\", config).then(res => {\n    dispatch({\n      type: actionType.USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionType.AUTH_ERROR\n    });\n  });\n};\nexport const login = (username, password) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"http://localhost:8000/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: actionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionType.LOGIN_FAIL\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"http://localhost:8000/api/auth/login\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: \"CLEAR_LEADS\"\n    });\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/proff/kenny/leadv2/front/src/store/actions/authActions.jsx"],"names":["actionType","returnErrors","axios","loadUser","dispatch","getState","type","USER_LOADING","token","auth","config","headers","get","then","res","USER_LOADED","payload","data","catch","err","response","status","AUTH_ERROR","login","username","password","body","JSON","stringify","post","LOGIN_SUCCESS","LOGIN_FAIL","logout","tokenConfig","LOGOUT_SUCCESS"],"mappings":"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","sourcesContent":["import * as actionType from \"./actionType\";\nimport { returnErrors } from \"./messages\";\n\nimport axios from \"axios\";\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({ type: actionType.USER_LOADING });\n\n  //get token from the state or the local state\n  const token = getState().auth.token;\n\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  //if token, add headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  axios\n    .get(\"http://localhost:8000/api/auth/user\", config)\n    .then((res) => {\n      dispatch({\n        type: actionType.USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionType.AUTH_ERROR,\n      });\n    });\n};\n\nexport const login = (username, password) => (dispatch) => {\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n  // Request Body\n  const body = JSON.stringify({\n    username,\n    password,\n  });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: actionType.LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionType.LOGIN_FAIL,\n      });\n    });\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: \"CLEAR_LEADS\",\n      });\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  // Get token from state\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}