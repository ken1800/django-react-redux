{"ast":null,"code":"import * as actionType from \"./actionType\";\nimport { returnErrors } from \"./messages\";\nimport axios from \"axios\";\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({\n    type: actionType.USER_LOADING\n  });\n  axios.get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: actionType.USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionType.AUTH_ERROR\n    });\n  });\n}; //LOGIN THE USER\n\nexport const login = (username, password) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"http://localhost:8000/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: actionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionType.LOGIN_FAIL\n    });\n  });\n}; //REGISTER THE USER\n\nexport const register = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(\"http://localhost:8000/api/auth/register\", body, config).then(res => {\n    dispatch({\n      type: actionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: actionType.REGISTER_FAIL\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"http://localhost:8000/api/auth/logout\", null, tokenConfig(getState)).then(res => {\n    //   dispatch({\n    //     type: \"CLEAR_LEADS\",\n    //   });\n    dispatch({\n      type: actionType.LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/proff/kenny/leadv2/front/src/store/actions/authActions.jsx"],"names":["actionType","returnErrors","axios","loadUser","dispatch","getState","type","USER_LOADING","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","response","status","AUTH_ERROR","login","username","password","config","headers","body","JSON","stringify","post","LOGIN_SUCCESS","LOGIN_FAIL","register","email","REGISTER_SUCCESS","REGISTER_FAIL","logout","LOGOUT_SUCCESS","token","auth"],"mappings":"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","sourcesContent":["import * as actionType from \"./actionType\";\nimport { returnErrors } from \"./messages\";\n\nimport axios from \"axios\";\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({ type: actionType.USER_LOADING });\n\n  axios\n    .get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: actionType.USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionType.AUTH_ERROR,\n      });\n    });\n};\n\n//LOGIN THE USER\nexport const login = (username, password) => (dispatch) => {\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n  // Request Body\n  const body = JSON.stringify({\n    username,\n    password,\n  });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: actionType.LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionType.LOGIN_FAIL,\n      });\n    });\n};\n\n//REGISTER THE USER\nexport const register = ({ username, password, email }) => (dispatch) => {\n  //headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n  // Request Body\n  const body = JSON.stringify({\n    username,\n    email,\n    password,\n  });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/register\", body, config)\n    .then((res) => {\n      dispatch({\n        type: actionType.REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionType.REGISTER_FAIL,\n      });\n    });\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"http://localhost:8000/api/auth/logout\", null, tokenConfig(getState))\n    .then((res) => {\n      //   dispatch({\n      //     type: \"CLEAR_LEADS\",\n      //   });\n      dispatch({\n        type: actionType.LOGOUT_SUCCESS,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  // Get token from state\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}